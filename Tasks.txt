Часть 3. Делегаты

Задание 1. Делегаты

- замените в PixelFilter наследование на делегирование: этот класс должен принимать имя фильтра и функцию,
  которая принимает пиксель и параметры и возвращает пиксель
- вместо абстрактного метода ProcessPixel, вы будете вызывать эту функцию
- уберите классы LighteningFilter, GrayscaleFilter, заменив их на объекты PixelFilter с подходящей функцией

Задание 2. Больше делегатов

- добавьте TransformFilter, который будет выполнять преобразование изображений. Организуйте его по образцу PixelFilter
- TransformFilter должен принимать в конструкторе sizeTransform (функцию, превращающую старый размер в новый) и
  pointTransform (функция, показывающая, из какой точки старого изображения брать новую)
- создайте объекты TransformFilter для отражения изображения по горизонтали и его поворот на 90 градусов по часовой стрелке

Задание 3. Свободное вращение

- создайте объект TransformFilter для поворота изображения на произвольное число градусов

Часть 4. Рефлексия типов

Задание 1. Рефлексия

Цель - сделать так, чтобы не приходилось реализовывать методы Parse и GetDescription в каждой новой реализации
интерфейса IParameters

- сделайте ParameterInfo атрибутом. Примените этот атрибут к свойству Coeficient класса LighteningParameters
- уберите методы Parse и GetDescription из интерфейса IParameters, оставив его пустым
- создайте статический класс ParametersExtensions, в котором определите методы расширения Parse и GetDescription
  к интерфейсу ISettings, и заполните их следующей логикой:
  * метод GetDescription должен брать все свойства переданного объекта, для который есть атрибут ParameterInfo, 
    и возвращать соответствующий этим свойством список ParameterInfo
  * метод Parse должен составлять аналогичный список свойств, и устанавливать свойства в соответствующие значения
    переданного списка значений


